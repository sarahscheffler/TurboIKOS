from secrets import token_bytes

import sys
import hashlib
from Value import Value
from Crypto.Util.number import bytes_to_long, long_to_bytes
import Fiat_Shamir
from wire import Wire
from gate import gate

"""
---check_commitments---
    inputs: 
        committed_views: list of all committed views, received in round1
        committed_broadcast: hashed broadcast, received in round 3
        parties: list of the party number opened by prover (generated from Fiat Shamir)
        list_rval: list the randomness used for each view commitment, same length as views, received in round 5
        views: list of opened party views, views[i] will correspond to parties[i] number, received in round 5
        broadcast: opened broadcast, received in round 5 
        broadvast_rval: randomness for broadcast, received in round 5

    output: 
        returns 1 if all assertions pass, else get assertion error 
"""
def check_commitments(committed_views, committed_broadcast, parties, views, list_rval, broadcast, broadcast_rval):
    #check that information from round 1 was not tampered with (views to committed_views)
    check_views = [None]*len(parties) #list of views committed again via sha256 

    for i in range(len(views)):
        input_str = b''
        input_lam_str = b''
        lam_z_str = b''
        lam_y_hat_str = b''
        lam_z_hat_str = b''
        for party in views[i]:
            for item in party:
                if item == 'input':
                    for item_value in item:
                        input_str += long_to_bytes(item_value.value)
                if item == 'input lambda':
                    for item_value in item:
                        input_lam_str += long_to_bytes(item_value.value)
                if item == 'lambda z':
                    for item_value in item:
                        lam_z_str += long_to_bytes(item_value.value)
                if item == 'lambda y hat':
                    for item_value in item:
                        lam_y_hat_str += long_to_bytes(item_value.value)
                if item == 'lambda z hat':
                    for item_value in item:
                        lam_z_hat_str += long_to_bytes(item_value.value)
        view_str = long_to_bytes(list_rval[i]) + input_str + input_lam_str + lam_z_str + lam_y_hat_str + lam_z_hat_str
        check_views[i] = hashlib.sha256(view_str)
            

    #check that information from round 3 was not tampered with (broadcast to committed_broadcast)
    round_3_check = b''
    for item in broadcast:
        if item == 'alpha':
            alpha_array = broadcast['alpha']
            n = len(alpha_array)
            m = len(alpha_array[0])
            for i in range(n):
                for j in range(m):
                    round_3_check += long_to_bytes(alpha_array[i][j].value)
        else:
            for item_value in broadcast[item]:
                round_3_check += long_to_bytes(item_value.value)
    round_3_check = long_to_bytes(broadcast_rval) + round_3_check

    #check views 
    for i in range(len(check_views)):
        assert(check_views[i].hexdigest() == committed_views[parties[i]])

    #check broadcast
    assert (hashlib.sha256(round_3_check).hexdigest() == committed_broadcast) 

    return 1

"""
---check_zeta---
    inputs: 
        broadcast (dictionary)
    output: 
        return 1 if sum(zeta) == 0, else assertion error 
"""
def check_zeta(broadcast): 
    #check \zeta == 0
    check_zero = Value(0)
    zeta = broadcast['zeta']
    assert(sum(zeta) == check_zero)
    return 1 

"""
---get_epsilons---
    
"""
def get_epsilons(committed_views, n_multgates):
    r2 = hashlib.sha256(committed_views)
    return Fiat_Shamir.make_epsilons(r2.digest(), n_multgates)

"""
---recompute---
    inputs:
        circuit: circuit object 
        wire: wire object
        n_gates: number of gates
        parties: list of parties opened 
        views: views opened by prover (parties[i] is the opened view[i])
        broadcast: open broadcast received in round 5
        epsilon1, epsilon2: generated by fiat shamir 
"""
def recompute(circuit, n_wires, n_gate, n_parties, parties, views, epsilon1, epsilon2, broadcast):
    alpha = []
    zeta_broadcast = [None]*len(parties)
    output_shares = []

    e_inputs = broadcast['e inputs']
    e_z = broadcast['e z']
    e_z_hat = broadcast['e z hat']

    for i in range(len(parties)):
        num_mult = 0
        input_val = views[i]['input']
        lambda_val = views[i]['input lambda']
        lambda_z = views[i]['lambda z']
        lam_y_hat = views[i]['lambda y hat']
        lam_z_hat = views[i]['lambda z hat']
        wire_value = [input_val[i] if i < len(input_val) else Value(0) for i in range(n_wires)]        
        alpha_shares = []


        for j in range(n_gate):
            c = circuit[j]
            if c.operation == 'ADD' or c.operation == 'XOR':
                x_v = wire_value[c.x]
                y_v = wire_value[c.y]
                z_v = x_v + y_v
                wire_value[c.z] = z_v
            if c.operation == 'MUL' or c.operation == 'AND':
                x_v = wire_value[c.x]
                y_v = wire_value[c.y]
                if i == 0: 
                    z_v = e_z[num_mult] - lambda_z[num_mult]
                else:
                    z_v = Value(0) - lambda_z[num_mult]
                wire_value[c.z] = z_v


                y_lam = lambda_val[c.y]
                y_lamh = lam_y_hat[num_mult]
                alpha_to_share = epsilon1[num_mult]*y_lam + (epsilon2[num_mult] * y_lamh)
                alpha_shares.append(alpha_to_share)
                num_mult += 1
        alpha.append(alpha_shares)

    return alpha, output_shares

"""
---check_recompute---
inputs:
    parties: list of parties that were opened 
    n_multgate: number of mult gates
    broadcast: broadcast channel received in round 5 
    recomputed_alphas: recompute()[0], row # = party, column # = multgate 
    recomputed_zetas: recompute()[1]
"""
def check_recompute(parties, n_multgate, broadcast, recomputed_alpha, output_shares):
    prover_alpha = broadcast['alpha']
    for i in range(len(parties)): 
        #check alphas 
        for j in range(n_multgate):
            assert (prover_alpha[j][parties[i]].value == recomputed_alpha[i][j].value)
        
    return 1 


def verifier(committed_views, committed_broadcast, parties, views, broadcast):
    Circuit = circuit.parse(gate)
    n_wires = Circuit[4]
    n_gate = Circuit[3]
    l_input = Circuit[1]
    n_input = Circuit[6]
    n_output = Circuit[5]
    l_output = Circuit[2]
    n_mul = Circuit[8]
    Circuit = Circuit[0]

    # Create list of wire data
    n_parties = 3    
    wire_data = circuit.wire_data(n_wires)
    w = Wire(wire_data, n_parties, n_wires)



    
    